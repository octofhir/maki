name: Build Binaries

on:
  push:
    tags:
      - 'v*'
  workflow_call:
    inputs:
      version:
        required: true
        type: string
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: maki-linux-x64
          # Note: Linux ARM64 build excluded due to UPX incompatibility

          # macOS
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: maki-macos-x64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: maki-macos-arm64

          # Windows
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: maki-windows-x64.exe
          - os: windows-latest
            target: aarch64-pc-windows-msvc
            artifact_name: maki-windows-arm64.exe

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache Cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-cargo-

      - name: Build with size optimizations
        env:
          RUSTFLAGS: "-C opt-level=z -C lto=fat -C embed-bitcode=yes -C strip=symbols"
        run: |
          cargo build --release --target ${{ matrix.target }} --bin maki

      - name: Strip binary (Unix)
        if: runner.os != 'Windows'
        run: |
          strip target/${{ matrix.target }}/release/maki || true

      - name: Install UPX
        # UPX doesn't work on macOS
        if: matrix.target != 'aarch64-apple-darwin' && matrix.target != 'x86_64-apple-darwin'
        uses: crazy-max/ghaction-upx@v3
        with:
          install-only: true

      - name: Compress with UPX
        # UPX doesn't work on macOS
        if: matrix.target != 'aarch64-apple-darwin' && matrix.target != 'x86_64-apple-darwin'
        run: |
          upx --best --lzma target/${{ matrix.target }}/release/maki* || true
        continue-on-error: true

      - name: Prepare artifact
        shell: bash
        run: |
          mkdir -p dist
          if [ "${{ runner.os }}" = "Windows" ]; then
            cp target/${{ matrix.target }}/release/maki.exe dist/${{ matrix.artifact_name }}
          else
            cp target/${{ matrix.target }}/release/maki dist/${{ matrix.artifact_name }}
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: dist/${{ matrix.artifact_name }}
          if-no-files-found: error

  create-release:
    needs: build
    runs-on: ubuntu-latest
    # Run when called from release workflow (has version input) OR triggered by tag push
    if: inputs.version != '' || startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create checksums
        run: |
          cd artifacts
          for dir in */; do
            cd "$dir"
            sha256sum * >> ../checksums.txt
            cd ..
          done

      - name: Prepare release assets
        run: |
          mkdir -p release
          cd artifacts
          for dir in */; do
            mv "$dir"* ../release/
          done
          mv checksums.txt ../release/

      - name: Extract release notes
        id: extract_notes
        run: |
          # Use version from workflow input or from git tag
          if [ -n "${{ inputs.version }}" ]; then
            VERSION="${{ inputs.version }}"
          else
            VERSION="${GITHUB_REF#refs/tags/v}"
          fi

          echo "Extracting release notes for version: $VERSION"

          # Get content between the version header and the next version header or end
          NOTES=$(awk "/## \[$VERSION\]/,/## \[|^---/" CHANGELOG.md | sed '1d;$d' | sed '/^---$/d' | sed '/^$/d')

          if [ -z "$NOTES" ]; then
            NOTES="Release $VERSION"
          fi

          # Save to file for multiline content
          echo "$NOTES" > release_notes.txt

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ inputs.version || github.ref_name }}
          name: Release v${{ inputs.version || github.ref_name }}
          files: |
            release/*
          body_path: release_notes.txt
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
